//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Main/Scripts/Managers/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""b532f190-a7e0-4920-b58b-fe2dc8892833"",
            ""actions"": [
                {
                    ""name"": ""SelectUnitMultiple"",
                    ""type"": ""Value"",
                    ""id"": ""60cd80b1-cf38-4287-8a51-88f6a3945641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectUnitSingle"",
                    ""type"": ""Button"",
                    ""id"": ""3c1490be-9f04-4929-865a-8ba4f4893695"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectUnitInclusive"",
                    ""type"": ""Value"",
                    ""id"": ""fa41345d-5369-46a9-8c09-1d7b1b175582"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TakeAction"",
                    ""type"": ""Button"",
                    ""id"": ""0fcd5eed-0312-4a35-a833-d9716416aadc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2eb84647-e713-483e-a3e4-e3d721e632fd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUnitMultiple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30ef23a8-917f-4e76-98df-e2bf3c44a460"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUnitSingle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7804311c-0039-4382-b12f-39f3e4588076"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUnitInclusive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc73cf16-5024-41fe-a84c-3551dc310860"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""9db654d2-a1b8-4c1f-bf51-b2131672b622"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0b7c2f02-899d-44bc-a4ee-ea015d356034"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""3045d9f2-3e0a-428b-949a-f2285342ca10"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AllowRotation"",
                    ""type"": ""Value"",
                    ""id"": ""2d149357-f891-459e-a41f-b35d4e1e1a2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseRotation"",
                    ""type"": ""Value"",
                    ""id"": ""9c6561c0-9b6d-4b39-a08e-a49f21a8a616"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""1443d77a-b952-4a1c-b551-21cb2944b5df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f624a94a-077f-4215-b97c-914f65bd71a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fcb1864b-c2e8-4cf4-8ab2-e08955b4441b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""86073155-833d-4ddd-a94c-708a76098c0d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""97e51656-b122-40a8-b90d-ed9881377e67"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99911adb-7786-4069-8994-eabf49e0f48b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0c4af46e-4b3c-49d7-ac3c-654f34ef4a55"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7c761b66-54ce-4482-bde0-d81a22b4e11a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""42d4c314-49cc-4e78-94f9-bcc28fa2a58c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""86b7355e-75cc-493b-ac84-4d4145389d74"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c38faa64-f90c-415a-88e5-1b52a0dc68ba"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""id"": ""10c0560f-f3ad-4e0b-80ad-2257cee9718a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""8e810dcb-7d4d-4b5f-84de-596ed81dc199"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""4f6e81d4-8cba-4161-9a44-1b1837442af1"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""38c270bc-a5b0-40bf-b549-24e1678d0fa6"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""SlowTap(duration=0.01,pressPoint=0.01)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AllowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdac30df-703f-49d1-9b32-cd977262a4b7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08d23eaf-c284-4c24-ba33-5127324db922"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Unit
        m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
        m_Unit_SelectUnitMultiple = m_Unit.FindAction("SelectUnitMultiple", throwIfNotFound: true);
        m_Unit_SelectUnitSingle = m_Unit.FindAction("SelectUnitSingle", throwIfNotFound: true);
        m_Unit_SelectUnitInclusive = m_Unit.FindAction("SelectUnitInclusive", throwIfNotFound: true);
        m_Unit_TakeAction = m_Unit.FindAction("TakeAction", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Movement = m_Camera.FindAction("Movement", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        m_Camera_AllowRotation = m_Camera.FindAction("AllowRotation", throwIfNotFound: true);
        m_Camera_MouseRotation = m_Camera.FindAction("MouseRotation", throwIfNotFound: true);
        m_Camera_Switch = m_Camera.FindAction("Switch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Unit
    private readonly InputActionMap m_Unit;
    private List<IUnitActions> m_UnitActionsCallbackInterfaces = new List<IUnitActions>();
    private readonly InputAction m_Unit_SelectUnitMultiple;
    private readonly InputAction m_Unit_SelectUnitSingle;
    private readonly InputAction m_Unit_SelectUnitInclusive;
    private readonly InputAction m_Unit_TakeAction;
    public struct UnitActions
    {
        private @PlayerInputActions m_Wrapper;
        public UnitActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectUnitMultiple => m_Wrapper.m_Unit_SelectUnitMultiple;
        public InputAction @SelectUnitSingle => m_Wrapper.m_Unit_SelectUnitSingle;
        public InputAction @SelectUnitInclusive => m_Wrapper.m_Unit_SelectUnitInclusive;
        public InputAction @TakeAction => m_Wrapper.m_Unit_TakeAction;
        public InputActionMap Get() { return m_Wrapper.m_Unit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
        public void AddCallbacks(IUnitActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitActionsCallbackInterfaces.Add(instance);
            @SelectUnitMultiple.started += instance.OnSelectUnitMultiple;
            @SelectUnitMultiple.performed += instance.OnSelectUnitMultiple;
            @SelectUnitMultiple.canceled += instance.OnSelectUnitMultiple;
            @SelectUnitSingle.started += instance.OnSelectUnitSingle;
            @SelectUnitSingle.performed += instance.OnSelectUnitSingle;
            @SelectUnitSingle.canceled += instance.OnSelectUnitSingle;
            @SelectUnitInclusive.started += instance.OnSelectUnitInclusive;
            @SelectUnitInclusive.performed += instance.OnSelectUnitInclusive;
            @SelectUnitInclusive.canceled += instance.OnSelectUnitInclusive;
            @TakeAction.started += instance.OnTakeAction;
            @TakeAction.performed += instance.OnTakeAction;
            @TakeAction.canceled += instance.OnTakeAction;
        }

        private void UnregisterCallbacks(IUnitActions instance)
        {
            @SelectUnitMultiple.started -= instance.OnSelectUnitMultiple;
            @SelectUnitMultiple.performed -= instance.OnSelectUnitMultiple;
            @SelectUnitMultiple.canceled -= instance.OnSelectUnitMultiple;
            @SelectUnitSingle.started -= instance.OnSelectUnitSingle;
            @SelectUnitSingle.performed -= instance.OnSelectUnitSingle;
            @SelectUnitSingle.canceled -= instance.OnSelectUnitSingle;
            @SelectUnitInclusive.started -= instance.OnSelectUnitInclusive;
            @SelectUnitInclusive.performed -= instance.OnSelectUnitInclusive;
            @SelectUnitInclusive.canceled -= instance.OnSelectUnitInclusive;
            @TakeAction.started -= instance.OnTakeAction;
            @TakeAction.performed -= instance.OnTakeAction;
            @TakeAction.canceled -= instance.OnTakeAction;
        }

        public void RemoveCallbacks(IUnitActions instance)
        {
            if (m_Wrapper.m_UnitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitActions @Unit => new UnitActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Movement;
    private readonly InputAction m_Camera_Zoom;
    private readonly InputAction m_Camera_AllowRotation;
    private readonly InputAction m_Camera_MouseRotation;
    private readonly InputAction m_Camera_Switch;
    public struct CameraActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Camera_Movement;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputAction @AllowRotation => m_Wrapper.m_Camera_AllowRotation;
        public InputAction @MouseRotation => m_Wrapper.m_Camera_MouseRotation;
        public InputAction @Switch => m_Wrapper.m_Camera_Switch;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @AllowRotation.started += instance.OnAllowRotation;
            @AllowRotation.performed += instance.OnAllowRotation;
            @AllowRotation.canceled += instance.OnAllowRotation;
            @MouseRotation.started += instance.OnMouseRotation;
            @MouseRotation.performed += instance.OnMouseRotation;
            @MouseRotation.canceled += instance.OnMouseRotation;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @AllowRotation.started -= instance.OnAllowRotation;
            @AllowRotation.performed -= instance.OnAllowRotation;
            @AllowRotation.canceled -= instance.OnAllowRotation;
            @MouseRotation.started -= instance.OnMouseRotation;
            @MouseRotation.performed -= instance.OnMouseRotation;
            @MouseRotation.canceled -= instance.OnMouseRotation;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface IUnitActions
    {
        void OnSelectUnitMultiple(InputAction.CallbackContext context);
        void OnSelectUnitSingle(InputAction.CallbackContext context);
        void OnSelectUnitInclusive(InputAction.CallbackContext context);
        void OnTakeAction(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnAllowRotation(InputAction.CallbackContext context);
        void OnMouseRotation(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
}
